#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include <dt-bindings/zmk/pointing.h>  // Disabled for stable build
// #include <mouse-gesture.dtsi>  // Disabled for stable build

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R          &kp T                                                                       &kp Y                   &kp U  &kp I      &kp O    &kp P
&mt LCTRL A       &kp S         &kp D         &kp F          &kp G                   &kp LS(LG(S))               &kp TAB                 &kp H                   &kp J  &kp K      &kp L    &mt RCTRL MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V          &kp B                   &kp COLON                   &kp SEMICOLON           &kp N                   &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &kp BACKSPACE  &lt_to_layer_0 3 LANG2  &lt_to_layer_0 4 SPACE      &lt_to_layer_0 1 ENTER  &lt_to_layer_0 2 LANG1                             &kp DEL
            >;

            // sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW>; // Disabled for stable build
        };

        FUNCTION {
            bindings = <
&kp ESCAPE  &kp NON_US_BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GRAVE                              &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans      &kp PIPE              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &trans      &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans      &kp TILDE             &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT            &trans      &trans  &kp F1  &kp F2  &kp F3  &kp F12  &kp NON_US_BACKSLASH
&trans      &trans                &trans                &trans                 &trans             &trans      &trans  &trans                           &mo 6
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &kp DOLLAR       &kp PERCENT   &kp LCTRL             &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &kp EXCLAMATION  &kp AT_SIGN   &kp POUND             &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                       &trans
            >;

            // sensor-bindings = <&inc_dec_kp LC(PAGE_DOWN) LC(PAGE_UP)>; // Disabled for stable build
        };

        MOUSE {
            bindings = <
&trans  &kp LA(LEFT_ARROW)  &mkp MB3  &kp LA(RIGHT_ARROW)  &trans                      &trans  &kp LA(LEFT_ARROW)  &mkp MB3  &kp LA(RIGHT_ARROW)  &trans
&trans  &mo 5               &mkp MB2  &mkp MB1             &trans  &trans      &trans  &trans  &mkp MB1            &mkp MB2  &mo 5                &trans
&trans  &trans              &trans    &trans               &trans  &trans      &trans  &trans  &trans              &trans    &trans               &trans
&trans  &trans              &trans    &trans               &trans  &trans      &trans  &trans                                                     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            // sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>; // Disabled for stable build
        };

        BLE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                              &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &bt BT_CLR_ALL  &trans        &bt BT_SEL 4  &bt BT_NXT    &bt BT_PRV    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans          &trans                                                  &trans
            >;
        };
    };
};

/*
// Configure mouse gesture patterns - Temporarily disabled for stable build
&zip_mouse_gesture {
    stroke-size = <300>;
    enable-8way;
    movement-threshold = <10>;

    // Browser navigation gestures
    history_back {
        pattern = <GESTURE_LEFT>;
        bindings = <&kp LA(LEFT)>;
    };

    history_forward {
        pattern = <GESTURE_RIGHT>;
        bindings = <&kp LA(RIGHT)>;
    };

    // Tab management
    close_tab {
        pattern = <GESTURE_DOWN GESTURE_RIGHT>;
        bindings = <&kp LC(W)>;
    };

    new_tab {
        pattern = <GESTURE_DOWN GESTURE_LEFT>;
        bindings = <&kp LC(T)>;
    };

    // Window switching
    next_window {
        pattern = <GESTURE_UP GESTURE_RIGHT>;
        bindings = <&kp LC(TAB)>;
    };

    prev_window {
        pattern = <GESTURE_UP GESTURE_LEFT>;
        bindings = <&kp LC(LS(TAB))>;
    };

    // Volume control
    volume_up {
        pattern = <GESTURE_UP>;
        bindings = <&kp C_VOLUME_UP>;
    };

    volume_down {
        pattern = <GESTURE_DOWN>;
        bindings = <&kp C_VOLUME_DOWN>;
    };

    // Desktop switching (macOS)
    desktop_left {
        pattern = <GESTURE_DOWN_LEFT GESTURE_UP_LEFT>;
        bindings = <&kp LC(LEFT)>;
    };

    desktop_right {
        pattern = <GESTURE_DOWN_RIGHT GESTURE_UP_RIGHT>;
        bindings = <&kp LC(RIGHT)>;
    };

    // Application launcher
    app_launcher {
        pattern = <GESTURE_UP GESTURE_DOWN>;
        bindings = <&kp LG(SPACE)>;
    };
};
*/
